<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>last_seen_x=0;
last_seen_y=0;

start_x =x;
start_y =y;

dummy_path=path_add();
path_set_kind(dummy_path,1);
path_set_precision(dummy_path,8);
new_grid=mp_grid_create(0,0,room_width/32,room_height/32,32,32); //mp_grid_create(view_xview[0], view_yview[0], room_width/16,room_height/16,16,16); //

mp_grid_add_instances(new_grid,obj_wall,true);

sight = 200;
chase_speed = 4;
status=0;       //0 = standard movement, 1 = chase
blood_count=random(100)+100;
hp=100;
dead=false;
wait = 200;
hit_count=0;

direction = choose(90,0,270,180)
image_angle=direction;
alarm[0]=wait;


test=false;

range=300;
radius=50;
dir=0;







// test

mypath=path_add();
path_set_kind(mypath,1);
path_set_precision(mypath,8);
patrol=false;
alert=false;
follow=false;
spotted=false

alert_timer=6;
spotted_x=x;
spotted_y=y;

temp_move=false;

up=true;
a=0;
alert_node_visited=noone;
s_node=-1;

event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(status==0){
direction = choose(90,0,270,180)
image_angle = direction;

}
if(dead==false){
    alarm[0]=wait;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// wall collision
//if place_meeting(x,y+vspeed,obj_wall){
//vspeed=0
//y=yprevious
//}
//if place_meeting(x+hspeed,y,obj_wall){
//hspeed=0
//x=xprevious
//}

if(hp&lt;=0){
    dead=true;
}
if(test==true){

mp_grid_path(new_grid,dummy_path,x,y,obj_player.x,obj_player.y,true);
path_points = path_get_number(dummy_path);

if follow=false &amp;&amp; temp_move=false
{
if distance_to_point(obj_player.x,obj_player.y)&lt;250 &amp;&amp; !collision_line(x,y,obj_player.x,obj_player.y,obj_wall,false,true)
    {
    patrol=false;
    alert=false;
    follow=true;
    spotted=false;
    alarm[0]=1;
    exit;
    }
}
//path_start(dummy_path,chase_speed,0,false);


}



if(test==false){

dir = point_direction(x,y,obj_player.x,obj_player.y);   // player check


// wall
if( (collision_line(x,y,obj_player.x,obj_player.y,obj_wall,0,1) &amp;&amp; status == 1)){
    status=4;
}

// last seen
else if((distance_to_object(obj_player) &gt; sight)&amp;&amp; status==1){
    status=4;
}

// returning
else if ((x != start_x) &amp;&amp; (y != start_y) &amp;&amp; (x==last_seen_x) &amp;&amp; (y==last_seen_y)){
    status=3;
} 
// basic 
else if (status==3 &amp;&amp; ((x == start_x) &amp;&amp; (y == start_y))){
   status=0;
   
}
//chasing
else if (((dir - direction) &lt; radius &amp;&amp; (dir - direction) &gt; -radius) &amp;&amp; distance_to_object(obj_player) &lt; range ){
    if (!collision_line(x,y,obj_player.x,obj_player.y,obj_wall,0,1)){
        last_seen_x = obj_player.x;
        last_seen_y = obj_player.y;
        status=1;

    }
}

// basic
if(status==0 &amp;&amp; dead==false){
    speed=0;

}
// chase
if(status==1 &amp;&amp; dead==false){
    direction = point_direction(x,y,obj_player.x,obj_player.y);
    image_angle = direction;
    mp_potential_step(obj_player.x,obj_player.y,chase_speed,0);
}
// returning to basic
if(status==3 &amp;&amp; dead==false){
    direction = point_direction(x,y,start_x,start_y);
    image_angle = direction;
    mp_potential_step(start_x,start_y,chase_speed,0);
}
// last seen
if(status==4 &amp;&amp; dead==false){
    direction = point_direction(x,y,last_seen_x,last_seen_y);
    image_angle = direction;
    mp_potential_step(last_seen_x,last_seen_y,chase_speed,0);
}

}   //end test

if(dead==true){
    sprite_index=sp_enemy_dead;
    speed=0;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_melee">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp-=100;

repeat(blood_count) instance_create(x,y,obj_blood);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//mp_grid_draw(new_grid);
draw_self();
draw_text(x+20,y, "Status: "+string(status));
draw_text(x+20,y+20, "seen x: "+string(last_seen_x));
draw_text(x+20,y-20, "seen y: "+string(last_seen_y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
