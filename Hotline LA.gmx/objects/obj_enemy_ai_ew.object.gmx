<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_basic_enemy_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>sp_person_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>variation=choose(0,1);
isNorth=false;
mass=1000;
x1=0;
x2=0;
y1=0;
y2=0;
sense=20;

attitude='remove';
shoot_time=0;
shoot_wait=0;

last_seen_x=0;
last_seen_y=0;

start_x =x;
start_y =y;


hit_count=0;
        
dummy_path=path_add();
path_set_kind(dummy_path,1);
path_set_precision(dummy_path,8);
new_grid=mp_grid_create(0,0,room_width/32,room_height/32,32,32); //mp_grid_create(view_xview[0], view_yview[0], room_width/16,room_height/16,16,16); //

mp_grid_add_instances(new_grid,obj_solid,true);

view_range=500;

spd=1.5;
chase_speed = 4;
status="basic";
blood_count=random(100)+100;
hp=100;
dead=false;
wait=0;
turn_time=200;

direction = choose(90,0,270,180)
image_angle=direction;

last_seen_obj=0;

checker_text="";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset speed to 0 (pushback from scrEnemyHit)
speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// basic stationary movement
if(status=="basic"){
direction = choose(90,0,270,180)
image_angle = direction;

}
if(dead==false){
    alarm[0]=turn_time;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// points for sight cone
x1 = x + lengthdir_x(view_range, image_angle - 45);
y1 = y + lengthdir_y(view_range, image_angle - 45);
x2 = x + lengthdir_x(view_range, image_angle + 45);
y2 = y + lengthdir_y(view_range, image_angle + 45);

// check dead
if(hp&lt;=0){
    dead=true;
    status="dead";
    //sprite_index=sp_enemy_dead;
    mass=100;

    //speed=0;
    path_end();
}
else{
/// MOVEMENT
// chase player if sighted


scrEnemySight();

if(status=="basic"){
    scrEnemyBasicWalk();
}

if(status=="chasing"){
    scrEnemyChaseTarget();
    mass=10;
}
if(status=="attack"){
    scrEnemyAttack("melee");
}

if(status=="transition"){
    scrEnemyTransition();
}
if(status=="returning"){
    scrEnemyReturn();
    mass=1000;
}

if(obj_player.hp&lt;0){
    status="complete";
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update sprite
image_speed=.3;
scrUpdateEnemySprite();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrCollision();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_weapon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pushback and create blood

scrEnemyHit();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrCollision();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrCollision();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//mp_grid_draw(new_grid);
draw_self();
draw_text(x+20,y, "status: "+string(status));
draw_text(x+20,y+20, "seen x: "+string(last_seen_x));
draw_text(x+20,y-20, "seen y: "+string(last_seen_y));
draw_text(x-40,y, "dir: "+string(direction));
draw_text(x-40,y+20, "x: "+string(abs(x)));
draw_text(x-40,y-20, "y: "+string(abs(y)));
draw_text(x,y-30, ""+checker_text);

        var x1 = x + lengthdir_x(view_range, image_angle - 45);
        var y1 = y + lengthdir_y(view_range, image_angle - 45);
        var x2 = x + lengthdir_x(view_range, image_angle + 45);
        var y2 = y + lengthdir_y(view_range, image_angle + 45);
draw_triangle(x,y,x1,y1,x2,y2,1);

draw_circle(x,y,sense,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
