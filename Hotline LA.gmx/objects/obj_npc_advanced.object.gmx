<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_npc</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_be_horrified=floor(random_range(1,20));
sight=240;   // seeing distance
start_shake=0;  // shake animation start
blood_count=random(100)+100;    // blood particle count per hit
hp=100;     // health
status=0;       // 1=scared 2=horrified
retreat_speed=random_range(-.2,-.6);    // speed of run away
sight_count=2;      // unused
wait=random_range(70,100);        // wait to turn
dead=false;         // dead
reset_status=0;     // unused

alarm[0]=wait;      // set rotate alarm

alarm[1]=2;         // shake animation alarm

        
dummy_path=path_add();
path_set_kind(dummy_path,1);
path_set_precision(dummy_path,8);
new_grid=mp_grid_create(0,0,room_width/32,room_height/32,32,32);

mp_grid_add_instances(new_grid,obj_solid,true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// dead
if(hp&lt;=0){
    dead=true;
}

if(dead==true){
    sprite_index=sp_enemy_dead;
    status=0;
    //alarm[0]=0;
    speed=0;
    
}

// high scare (shake)
if(can_be_horrified &gt; 12 &amp;&amp; dead==false){
     //var inst = instance_nearest(x,y,obj_blood);
    if(distance_to_object(obj_blood) &lt;=sight) {
       
        if(!collision_line(x,y,obj_player.x,obj_player.y,obj_wall,1,0)) {
        
            status=2;
        }
    }
   else if (distance_to_object(obj_player) &lt;= sight){
       
        if(!collision_line(x,y,obj_player.x,obj_player.y,obj_wall,1,0)) {
            //mp_potential_step(obj_player.x,obj_player.y,retreat_speed,0);
            mp_grid_path(new_grid,dummy_path,x,y,obj_player.x,obj_player.y,true);
            path_start(dummy_path,retreat_speed,"",1);
            status=1;
        }
    }
    else{
        status=0;
        speed=0;
    }
    
    
}

//medium scare (runner)
else if(can_be_horrified &gt; 5 &amp;&amp; can_be_horrified &lt;= 12 &amp;&amp; dead==false){
    if(distance_to_object(obj_blood) &lt;=sight) {

       
        if(!collision_line(x,y,obj_player.x,obj_player.y,obj_wall,1,0)) {
            //mp_potential_step(obj_player.x,obj_player.y,retreat_speed,0);
            mp_grid_path(new_grid,dummy_path,x,y,obj_player.x,obj_player.y,true);
            path_start(dummy_path,retreat_speed,"",1);
            status=3;
        }
    }
    
    else if not(status == 3){
        status=0;
        speed=0;
    }
}

// low scare
else{
    if (distance_to_object(obj_player) &lt;= sight) &amp;&amp; dead == false{
       
        if(!collision_line(x,y,obj_player.x,obj_player.y,obj_wall,1,0)) {
            //mp_potential_step(obj_player.x,obj_player.y,retreat_speed,0);
            mp_grid_path(new_grid,dummy_path,x,y,obj_player.x,obj_player.y,true);
            path_start(dummy_path,retreat_speed,"",1);
            status=1;
        }
    }
    else{
        status=0;
        speed=0;
    }
}

if(status==1){   //scared

    direction = point_direction(x,y,obj_player.x,obj_player.y);
    image_angle = direction;

}
if(status==3 &amp;&amp; dead==false){
    //mp_potential_step(obj_retreat.x,obj_retreat.y,retreat_speed+3,0);
    mp_grid_path(new_grid,dummy_path,x,y,obj_retreat.x,obj_retreat.y,true);
    path_start(dummy_path,retreat_speed+3,"",1);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
