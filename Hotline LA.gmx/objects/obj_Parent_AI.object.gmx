<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
attitude='remove';
shoot_time=0;
shoot_wait=0;

last_seen_x=0;
last_seen_y=0;

start_x =x;
start_y =y;

chase = false;
standing=true;

hit_count=0;
        
dummy_path=path_add();
path_set_kind(dummy_path,1);
path_set_precision(dummy_path,8);
new_grid=mp_grid_create(0,0,room_width/32,room_height/32,32,32); //mp_grid_create(view_xview[0], view_yview[0], room_width/16,room_height/16,16,16); //

mp_grid_add_instances(new_grid,obj_solid,true);

view_range=500;


chase_speed = 4;
status=0;       //0 = standard movement, 1 = chase
blood_count=random(100)+100;
hp=100;
dead=false;
wait=0;
turn_time=200;
alarm[0]=turn_time;

direction = choose(90,0,270,180)
image_angle=direction;

last_seen_obj=0;

checker_text="";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset speed to 0

speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(x==start_x &amp;&amp; y==start_y){
direction = choose(90,0,270,180)
image_angle = direction;

}
if(dead==false){
    alarm[0]=turn_time;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// todo
// none


// points for sight cone
var x1 = x + lengthdir_x(view_range, image_angle - 45);
        var y1 = y + lengthdir_y(view_range, image_angle - 45);
        var x2 = x + lengthdir_x(view_range, image_angle + 45);
        var y2 = y + lengthdir_y(view_range, image_angle + 45);

// check dead
if(hp&lt;=0){
    dead=true;
    sprite_index=sp_enemy_dead;
    //speed=0;
    path_end();
}
else{
/// MOVEMENT
// chase player

// check - distance to player and no collision with solid and player is trespassing
if(distance_to_point(obj_player.x,obj_player.y)&lt; view_range &amp;&amp; !collision_line(x,y,obj_player.x,obj_player.y,obj_solid,false,true) &amp;&amp; global.trespassing==true)
    {
      // check - sight cone &amp;&amp; close to player
     if point_in_triangle(obj_player.x, obj_player.y, x, y, x1, y1, x2, y2) //|| collision_circle(x,y,40,obj_player,1,0)
     {
        
        last_seen_x=obj_player.x;
        last_seen_y=obj_player.y;
        checker_text = "?!";
    
     if(last_seen_obj != 0){
        with (last_seen_obj)
            instance_destroy();
        }
     last_seen_obj=instance_create(last_seen_x,last_seen_y,obj_last_known_position);
     }
    }


if  (last_seen_x != 0 &amp;&amp; last_seen_y != 0)
    {
        chase = true;
        standing=false;
        wait=80;
    }
else
    {
        standing=true;
        chase=false;
}


if(chase==true){
        if(collision_circle(x,y,20,obj_player,1,0)){            
            x=xprevious;
            y=yprevious;   
        }
        else if(place_meeting(x,y,last_seen_obj)){
            //alarm[1]=80;
            //if(wait&lt;1){
            last_seen_x = 0;
            last_seen_y = 0;
            with(last_seen_obj)
                instance_destroy();
            //wait=false;
            //}
            
           // wait--;
            
        }
        else{
            direction = point_direction(x,y,last_seen_x,last_seen_y);
            image_angle = direction;
            mp_grid_path(new_grid,dummy_path,x,y,last_seen_x,last_seen_y,true);
            path_start(dummy_path,4,"",1);
        }
        
       
       
}
if(standing==true){
    alarm[1]=-1;
    if(x != start_x &amp;&amp; y != start_y){
        
        checker_text="?";
        //alarm[1]=80;
        if(wait&lt;1){
            direction = point_direction(x,y,start_x,start_y);
            image_angle = direction;
            mp_grid_path(new_grid,dummy_path,x,y,start_x,start_y,true);
            path_start(dummy_path,4,"",1);
            wait=0;

        }
        else if(wait == 60){
            direction+=45;
            image_angle = direction;
        }
        else if(wait == 30){
            direction-=90;
            image_angle = direction;
        }
        wait--;
        
    }
    else{
            // do default
            checker_text="";
    }

}

}
//path_points = path_get_number(dummy_path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_weapon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pushback and create blood

// push back
direction=point_direction(x,y,other.x,other.y);
if(!collision_circle(x,y,25,obj_solid,1,0)){
    speed=-4;
    alarm[2]=4;    // reset speed to 0
}

// create blood
if(hit_count&lt;8){
hp-=100;

repeat(blood_count) instance_create(x,y,obj_blood);
hit_count++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x=xprevious;
//y=yprevious;

//motion_add(point_direction(other.x, other.y, x, y), 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//mp_grid_draw(new_grid);
draw_self();
draw_text(x+20,y, "att: "+string(attitude));
draw_text(x+20,y+20, "seen x: "+string(last_seen_x));
draw_text(x+20,y-20, "seen y: "+string(last_seen_y));
draw_text(x-40,y, "dir: "+string(direction));
draw_text(x-40,y+20, "x: "+string(abs(x)));
draw_text(x-40,y-20, "y: "+string(abs(y)));
draw_text(x,y-30, ""+checker_text);

        var x1 = x + lengthdir_x(view_range, image_angle - 45);
        var y1 = y + lengthdir_y(view_range, image_angle - 45);
        var x2 = x + lengthdir_x(view_range, image_angle + 45);
        var y2 = y + lengthdir_y(view_range, image_angle + 45);
draw_triangle(x,y,x1,y1,x2,y2,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
